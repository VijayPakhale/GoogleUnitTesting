
1. Importance of Unit testing.
   https://www.pcloudy.com/importance-of-unit-testing/#:~:text=Unit%20testing%20allows%20developers%20to,escalate%20to%20more%20critical%20stages.

2. CI/CD Pipelines:
	https://www.pcloudy.com/cicd-pipeline-demystifying-the-complexities/

Expect - non fatal assert - Test continues even if assertion failed.
Assert - Fatal assert - Test stops if assertion failed.

EXPECT_EQ
EXPECT_TRUE
ASSERT_EQ
ASSERT_NQ
ASSERT_TRUE - passes if condition is true
ASSERT_FALSE - passes if condition is false
ASSERT_LT
ASSERT_LE
ASSERT_GT
ASSERT_GE
Same for Expect
This works for C++ std::string types also.

****************
Assertions on C-Strings
ASSERT_STREQ 
ASSERT_STRNQ
ASSERT_STRCASEEQ
ASSERT_STRCASENQ
EXPECT_STREQ 
EXPECT_STRNQ
EXPECT_STRCASEEQ
EXPECT_STRCASENQ


************
Assertiions on Exception
ASSERT_ANY_THROW(GetSquareRoot(-8)) -passes if any exception occured
ASSERT_THROW(function, exception_type) - passes if mentioned exception type is thrown
ASSERT_NO_THROW(func) - passes if no exception is thrown

***************************
Mocking - Mocking is a process used in unit testing when the unit being tested has external dependencies. 
	The purpose of mocking is to isolate and focus on the code being tested and not on the behavior 
	or state of external dependencies.
	Class ----> Real Dependencies
	Class ----> Mock Objects

Fake/Dummy objects - 
	Working as implementation for mocking.
	Not suitable for Productions
	Takes Shortcut
	Ex. In-memory Database.
Stubs: 
	Objects that responds/works with predefined data

Mock:
	They also responds with predefined data but have some expectations-
		-	Throw/Nothrow exception
		- Calls methods.

Mock_Methods:
	- Older versions
		MOCK_METHODn(fname, returnType(param1, param2,...));
		int sum(int,int) ==> MOCK_METHOD2(sum, int(int,int));
		void DoSomething() ==> MOCK_METHOD0(DoSomething, void());
		int sum(int,int)const ==> MOCK_CONST_METHOD2(sum, int(int,int));
		

	- Newer versions:
		int sum(int,int) ==> MOCK_METHOD(int, sum, (int,int));
		map<int, char> GetData(int) ==> MOCK_METHOD((map<int, char>), GetData, (int));
		
		Specs: const, noexcept, override
		void DoSomething() const ==> MOCK_METHOD(void, DoSomething, (), (const))

	
	- Mocks can be used to isolate the test.

	- Mocked methods have empty implementations.

	- They can be used to control the behaviour of certain methods, like: returning a certain result, calling another method, throwing exceptions.

	- Mocks can be used for collaboration tests. That means you can test that method A called method B, with what parameters, and so on

	- Matchers can be used for matching parameters. Special matchers are "_" (anything) or the exact value ("Exactly").

	- Other matchers usually found: Gt( greater than), Ge(greater or equal), Lt(lower than), Le(lower or equal).

	- There are special matchers for strings.

	- Matchers can be used in assertions on vectors.


******************************

To Generate test report in xml format - 
Go to testProject -> Properties -> Debugging ->CommandArguments Setvalue(--gtest_output="xml:test_output.xml")
and Debug the tests.